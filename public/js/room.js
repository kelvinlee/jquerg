// Generated by CoffeeScript 1.6.3
var aEditorList, connect_socket, createEditor, createEditor_default, editor, fCheckEditor, fDelEditor, fDestroyEditer, fGetEditor, fGetEditors, finishedLoad, init, meeting, oVideoList, path, popshow, read, runjs, socket, startVideo, _aFinished;

read = true;

path = "ace/mode/";

popshow = function(id) {};

_aFinished = [];

finishedLoad = function(options) {
  console.log(options);
  _aFinished.push(options);
  if (_aFinished.length >= 4) {
    return init();
  }
};

init = function() {
  return $('#loading').fadeOut(800);
};

aEditorList = [];

fGetEditors = function() {
  var aN, e, _i, _len;
  aN = [];
  for (_i = 0, _len = aEditorList.length; _i < _len; _i++) {
    e = aEditorList[_i];
    aN.push({
      name: e.name,
      type: e.type,
      content: e.editor.getSession().getValue()
    });
  }
  return aN;
};

fGetEditor = function(name) {
  var e, _i, _len;
  if (name === 'main') {
    return editor;
  }
  for (_i = 0, _len = aEditorList.length; _i < _len; _i++) {
    e = aEditorList[_i];
    if (e.name === name) {
      return e.editor;
    }
  }
};

fCheckEditor = function(name) {
  var e, _i, _len;
  if (name === 'main') {
    return true;
  }
  for (_i = 0, _len = aEditorList.length; _i < _len; _i++) {
    e = aEditorList[_i];
    if (e.name === name) {
      return true;
    }
  }
  return false;
};

fDelEditor = function(name) {
  var anewlist, e, _i, _len;
  anewlist = [];
  for (_i = 0, _len = aEditorList.length; _i < _len; _i++) {
    e = aEditorList[_i];
    if (e.name === name) {
      continue;
    }
    anewlist.push(e);
  }
  return aEditorList = anewlist;
};

fDestroyEditer = function(name) {
  fDelEditor(name);
  $('#' + name).next().remove();
  return $('#' + name).remove();
};

createEditor = function(name, type) {
  var A, Box, C, D, E, S, S1, S2;
  if (type == null) {
    type = 'javascript';
  }
  if (fCheckEditor(name)) {
    return true;
  }
  S = $('<span>');
  A = $('<a href="javascript:void(0)">');
  C = $('<pre>');
  D = $('<div>');
  S1 = S.clone().addClass('editorname').text(name);
  S2 = S.clone().addClass('editortype').text(type);
  A.addClass('typcn');
  A.attr('for', name);
  Box = D.clone().addClass('box');
  Box.append(A.clone().removeClass('typcn').addClass('boxname').append(S1).append(' / ').append(S2));
  if (type === 'javascript' || type === 'coffee') {
    Box.append(A.clone().addClass('typcn-media-play-outline'));
  }
  Box.append(A.clone().addClass('typcn-cog-outline'));
  Box.append(A.clone().addClass('typcn-heart'));
  Box.append(A.clone().addClass('typcn-document-delete'));
  Box.append(A.clone().addClass('typcn-arrow-maximise'));
  Box.append(A.clone().addClass('typcn-arrow-minimise hide'));
  D.addClass('editor_ctrl clearfix');
  D.append(Box);
  C.attr('id', name);
  C.addClass('editor');
  $('#editorlist').append(C);
  $('#editorlist').append(D);
  E = ace.edit(name);
  E.setTheme("ace/theme/twilight");
  E.getSession().setMode(path + type);
  E.on("change", function(e) {
    if (read) {
      return socket.emit('editor', {
        deltas: e.data,
        name: name
      });
    }
  });
  aEditorList.push({
    name: name,
    type: type,
    editor: E
  });
  return false;
};

editor = {};

createEditor_default = function() {
  editor = ace.edit("main");
  editor.setTheme("ace/theme/twilight");
  editor.getSession().setMode(path + "javascript");
  editor.on("change", function(e) {
    if (read) {
      return socket.emit('editor', {
        deltas: e.data,
        name: "main"
      });
    }
  });
  return finishedLoad('create default editor');
};

socket = {};

connect_socket = function(url) {
  socket = io.connect(url);
  socket.on('online list', function(data) {
    return $("#n_p").text(data.length);
  });
  socket.emit('login', {
    data: 'first'
  });
  socket.on('get default info', function(data) {
    return socket.emit('create default info', {
      who: data.who,
      content: editor.getSession().getValue(),
      list: fGetEditors()
    });
  });
  socket.on('create default info', function(data) {
    var e, nE, _i, _len, _ref;
    read = false;
    editor.getSession().setValue(data.content);
    console.log(data.list);
    _ref = data.list;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      if (!createEditor(e.name, e.type)) {
        nE = fGetEditor(e.name);
        nE.getSession().setValue(e.content);
      }
    }
    return read = true;
  });
  socket.on('editor', function(data) {
    var Se;
    read = false;
    Se = fGetEditor(data.name);
    Se.getSession().getDocument().applyDeltas([data.deltas]);
    return read = true;
  });
  socket.on('create editor', function(data) {
    return createEditor(data.name, data.type);
  });
  socket.on('destroy editor', function(data) {
    return fDestroyEditer(data.name);
  });
  socket.on('chat', function(data) {});
  socket.on('action', function(data) {});
  return finishedLoad('socket link...');
};

meeting = new Meeting();

oVideoList = document.getElementById('videolist');

meeting.openSignalingChannel = function(callback) {
  return socket.on('message', callback);
};

meeting.onaddstream = function(e) {
  console.log(e);
  if (e.type === 'local' && $('#self').length <= 0) {
    $("#videolist").prepend(e.video);
  }
  if (e.type === 'remote') {
    return $("#videolist").append(e.video);
  }
};

startVideo = function() {
  return meeting.setup();
};

runjs = function(ed) {
  var error, js, type;
  type = ed.getSession().$modeId.replace('ace/mode/', '');
  if (type === 'coffee') {
    js = CoffeeScript.compile(ed.getSession().getValue(), {
      bare: true
    });
  } else if (type === 'javascript') {
    js = ed.getSession().getValue();
  } else {
    return false;
  }
  try {
    return eval(js);
  } catch (_error) {
    error = _error;
    return alert(error);
  }
};

require("ace/commands/default_commands").commands.push({
  name: "runjs",
  bindKey: "Command-Return",
  exec: runjs
}, {
  name: "runjs2",
  bindKey: "ctrl-Return",
  exec: runjs
});

setTimeout(function() {
  return finishedLoad('loading show');
}, 4500);

$(function() {
  $("select[name='modelist']").selectpicker({
    style: 'btn-primary',
    menuStyle: 'dropdown-inverse'
  });
  $("input[name=create]").click(function() {
    if ($("input[name=filename]").val()) {
      if (createEditor($("input[name=filename]").val(), $("select[name='modelist']").val())) {
        alert('文件名已存在');
      } else {
        socket.emit('create editor', {
          name: $("input[name=filename]").val(),
          type: $("select[name='modelist']").val()
        });
      }
      return $("input[name=filename]").val('');
    } else {
      return alert('请输入文件名');
    }
  });
  $(document).on('click', '.typcn-arrow-maximise', function() {
    var Mname;
    Mname = $(this).attr('for');
    $('#' + Mname).addClass('fullScreen');
    $(this).parents('.editor_ctrl').addClass('fullbox');
    $(this).addClass('hide');
    return $(this).next().removeClass('hide');
  });
  $(document).on('click', '.typcn-arrow-minimise', function() {
    var Mname;
    Mname = $(this).attr('for');
    $('#' + Mname).removeClass('fullScreen');
    $(this).parents('.editor_ctrl').removeClass('fullbox');
    $(this).addClass('hide');
    return $(this).prev().removeClass('hide');
  });
  $(document).on('click', '.typcn-document-delete', function() {
    socket.emit('destroy editor', {
      name: $(this).attr('for')
    });
    return fDestroyEditer($(this).attr('for'));
  });
  $(document).on('click', '.typcn-media-play-outline', function() {
    return runjs(fGetEditor($(this).attr('for')));
  });
  $("[name=url]").val(window.location.href);
  createEditor_default();
  return finishedLoad('bind btn event');
});
